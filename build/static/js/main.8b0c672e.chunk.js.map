{"version":3,"sources":["Todoitem.js","Inputform.js","Infoblock.js","App.js","index.js"],"names":["TodoItem","_this","this","Remove","styled","div","_templateObject","react_default","a","createElement","className","id","props","item","type","checked","completed","onChange","handleChange","htmlFor","style","fontStyle","color","textDecoration","text","onClick","delItem","React","Component","InputForm","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","addTolist","textVal","input","current","value","todos","toConsumableArray","state","trim","newItem","length","push","toSetNewState","localStorage","setItem","JSON","stringify","toHideInput","handlePressKey","e","key","createRef","focus","Fragment","autoComplete","placeholder","onKeyUp","ref","InfoBlockOnLoad","InfoBlock","Infoblock_templateObject","Plus","span","_templateObject2","toShowInput","App","array","setState","updatedTodos","map","filter","index","justloaded","isInputShown","_this2","updTodos","parse","getItem","document","addEventListener","target","_this3","todoList","Todoitem","Infoblock","Inputform","undefined","ReactDOM","render","src_App","getElementById"],"mappings":"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","file":"static/js/main.8b0c672e.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nclass TodoItem extends React.Component {\n\trender() {\n\t\t//объект со стилями для изменения вида пункта списка при переключении true/false\n\t\tconst completedStyle = {\n\t\t\tfontStyle: \"italic\",\n\t\t\tcolor: \"#cdcdcd\",\n\t\t\ttextDecoration: \"line-through\"\n\t\t};\n\t\t//Используем styled-components для создания стилизованного компонента, отобрающего кнопку Удалить\n\t\tconst Remove = styled.div`\n\t\t\tcolor: #d00;\n\t\t\tfont-size: 1.45em;\n\t\t\tfont-weight: bold;\n\t\t\tline-height: 1;\n\t\t\tmargin-left: auto;\n\t\t\tpadding-right: 5px;\n\t\t\tcursor: pointer;\n\t\t`;\n\n\t\treturn (\n\t\t\t<div className='todo-item'>\n\t\t\t\t<input\n\t\t\t\t\tid={this.props.item.id}\n\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\tchecked={this.props.item.completed}\n\t\t\t\t\tonChange={() => this.props.handleChange(this.props.item.id)}\n\t\t\t\t/><label htmlFor={this.props.item.id}>\n\t\t\t\t\t<p style={this.props.item.completed ? completedStyle : null}>{this.props.item.text}</p>\n\t\t\t\t</label>\n\t\t\t\t<Remove onClick={() => this.props.delItem(this.props.item.id)}>&times;</Remove>\n\t\t\t</div>\n\t\t)\n\t}\n};\n\nexport default TodoItem;\n\n//применяем способ статической типизации, проверяя, соответсвуют ли полученные даные из App нужному типу\n/*TodoItem.propTypes = {\n\titem: PropTypes.object\n};*/","import React from 'react';\nimport PropTypes from 'prop-types';\n\n//Данный компонент рендерит поле для ввода пункта в список дел\nclass InputForm extends React.Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.input = React.createRef(); //получаем ссылку на поле ввода\n\t};\n\n\t//обработчик добавляет пункт в список, после клика на кнопку OK в области поля ввода\n\taddTolist = () => {\n\t\tconst textVal = this.input.current.value; //получаем знаение из поля ввода\n\t\tconst todos = [...this.props.state.todos]; //копируем в массив список дел из состояния\n\t\tif (textVal && textVal.trim() !== '') { //проверяем, чтобы поле ввода было не пустым\n\t\t\tconst newItem = {\t\t\t\t\t\t\t\t\t\t\t//создаем объект с данными пункта для списка дел\n\t\t\t\tid: this.props.state.todos.length,\n\t\t\t\ttext: textVal,\n\t\t\t\tcompleted: false\n\t\t\t};\n\t\t\ttodos.push(newItem); //добавляем его в массив списка дел\n\t\t\tthis.input.current.value = null; //обнуляем поле ввода\n\t\t};\n\n\t\tthis.props.toSetNewState(todos); //обновляем состояние списка дел\n\t\tlocalStorage.setItem('todoDataInLS', JSON.stringify(todos)); //сохраняем в localStorage список\n\t\tthis.props.toHideInput(); //скрываем поле ввода\n\t};\n\n\t//обрабатываем нажатие Enter при наборе в поле ввода\n\thandlePressKey = (e) => {\n\t\tif (e.key === 'Enter') {\n\t\t\tthis.addTolist();\n\t\t}\n\t};\n\n\t//при рендеринге поля ввода устанавляем в него курсор\n\tcomponentDidMount() {\n\t\tthis.input.current.focus();\n\t}\n\n\trender() {\n\t\tconst pHolder = \"После набора нажите Enter или ОК\";\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<div id=\"add-field\">\n\t\t\t\t\t<div><input\n\t\t\t\t\t\tautoComplete=\"off\"\n\t\t\t\t\t\tid=\"text-input\" type=\"text\"\n\t\t\t\t\t\tplaceholder={pHolder}\n\t\t\t\t\t\tonKeyUp={this.handlePressKey}\n\t\t\t\t\t\tref={this.input}\n\t\t\t\t\t/></div>\n\t\t\t\t\t<div><button id=\"okbutton\" onClick={this.addTolist} >ок</button></div>\n\t\t\t\t</div>\n\t\t\t</>\n\t\t)\n\t};\n};\n\nexport default InputForm;\n\n//применяем способ статической типизации, проверяя, соответсвуют ли полученные даные из App нужному типу\nInputForm.propTypes = {\n\tstate: PropTypes.object\n};\n","import React from 'react';\nimport styled from 'styled-components';\n\nclass InfoBlockOnLoad extends React.Component {\n\trender() {\n\t\tconst InfoBlock = styled.div`\n\t\t\tposition: absolute;\n\t\t\tbackground-color: rgba(0, 200, 0, 0.6);\n\t\t\twidth: 100%;\n\t\t\ttext-align: center;\n\t\t\tfont-size: 1.2em;\n\t\t\tcolor: rgb(1, 29, 116);\n\t\t\tpadding: 20px 0 20px;\n\t\t\tborder-radius: 3px;\n\t\t\tmax-width: 400px;\n\t\t\ttop: 60px;\n\t\t\tleft: 50%;\n\t\t\ttransform: translateX(-50%);\n    `;\n\n\t\tconst Plus = styled.span`\n\t\t\tdisplay: inline-block;\n\t\t\tpadding: 0px 3px;\n\t\t\tbackground-color: rgb(255, 0, 0);\n\t\t\tcolor: white;\n\t\t\tvertical-align: middle;\n\t\t\tmargin: 0 3px;\n\t\t\tcursor: pointer;\n\t\t\tborder-radius: 2px;\n\t\t\tpadding: 2px 6px;\n\t\t`;\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<InfoBlock  >\n\t\t\t\t\tДля добавления задачи в список дел нажмите кнопку\n\t\t\t\t\t<Plus id=\"plus\" onClick={this.props.toShowInput}>+</Plus>\n\t\t\t\t\t слева вверху\n\t\t\t\t</InfoBlock>\n\t\t\t</>\n\t\t)\n\t}\n};\n\nexport default InfoBlockOnLoad;","\nimport React from 'react';\nimport Todoitem from './Todoitem'; //Компонент рендерит пункт списка дел\nimport Inputform from './Inputform'; //Компонент рендерит поле для добавления пункта в список\nimport Infoblock from './Infoblock'; //Рендерит инфоблок\n\nclass App extends React.Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\ttodos: [], //Здесь будем хранить список дел в виде массива объектов\n\t\t\tisInputShown: false, //Здесь - состояние поля для добавления\n\t\t\tjustloaded: false //состояни определяет загрузку инфоблока\n\t\t};\n\t};\n\n\t//данным методом будем менять состояние списка дел из дочерних компонентов\n\ttoSetNewState = (array) => this.setState({ todos: array });\n\n\t//метод обратывает клик на пункт списка, меняет его состояние сделано/не_сделано\n\thandleChange = (id) => {\n\t\tconst todos = [...this.state.todos];\n\t\tconst updatedTodos = todos.map(item => {\n\t\t\tif (item.id === id) {\n\t\t\t\titem.completed = !item.completed\n\t\t\t}\n\t\t\treturn item;\n\t\t});\n\t\tthis.setState({ todos: updatedTodos })\n\t\tlocalStorage.setItem('todoDataInLS', JSON.stringify(updatedTodos)); //сохраняем локально состояние списка\n\t};\n\n\t//метод обрабатывает удаление пункта из списка\n\tdelItem = id => {\n\t\tconst todos = [...this.state.todos];\n\t\tconst updatedTodos = todos.filter(item => item.id !== id)\n\t\t\t.map((item, index) => {\n\t\t\t\titem.id = index\n\t\t\t\treturn item\n\t\t\t});\n\t\tthis.setState({ todos: updatedTodos });\n\t\tlocalStorage.setItem('todoDataInLS', JSON.stringify(updatedTodos));\n\t\tthis.setState({ justloaded: false });\n\t};\n\n\t//два метода ниже меняют состояние для отображения/скрытия поля ввода и ифноблока \n\ttoShowInput = () => {\n\t\tthis.setState({ justloaded: false });\n\t\tthis.setState({ isInputShown: true });\n\t};\n\n\ttoHideInput = () => this.setState({ isInputShown: false });\n\n\t//перед рендерингом компонента(при загрузке страницы):\n\tcomponentDidMount() {\n\t\t//подгружаем список дел в состояние из localStorage\n\t\tconst updTodos = JSON.parse(localStorage.getItem('todoDataInLS'));\n\t\tif (updTodos) this.setState({ todos: updTodos });\n\t\tthis.setState({ justloaded: true });\n\n\t\t//вешаем обработчики на клики вне поля ввода и на нажатие клавиши Esc,\n\t\tdocument.addEventListener('click', e => {\n\t\t\tconst id = e.target.id;\n\t\t\tif (id !== 'add-field' && id !== 'text-input' && id !== 'okbutton'\n\t\t\t\t&& id !== 'add-button' && id !== 'plus') {\n\t\t\t\tthis.toHideInput();\n\t\t\t};\n\t\t});\n\n\t\tdocument.addEventListener('keyup', e => {\n\t\t\tif (e.key === \"Escape\") {\n\t\t\t\tthis.toHideInput();\n\t\t\t};\n\t\t});\n\t};\n\n\trender() {\n\t\t//из массива списка дел формируем нужно кол-во компонентов для отображения списка дел,\n\t\t//передавая компоненту данные и методы из родителя в виде свойст\n\t\tconst todoList = this.state.todos.map(\n\t\t\titem => <Todoitem\n\t\t\t\tkey={item.id}\n\t\t\t\titem={item}\n\t\t\t\thandleChange={this.handleChange}\n\t\t\t\tdelItem={this.delItem}\n\n\t\t\t\ttoShowInput={this.toShowInput}\n\t\t\t/>\n\t\t);\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{//Показываем инфоблок сразу после загрузки и пустом списке\n\t\t\t\t\tthis.state.justloaded && !this.state.todos.length &&\n\t\t\t\t\t<Infoblock\n\t\t\t\t\t\ttoShowInput={this.toShowInput}\n\t\t\t\t\t/>}\n\t\t\t\t{//Показываем или убираем поле ввода, передавая ему данные и методы \n\t\t\t\t\tthis.state.isInputShown &&\n\t\t\t\t\t<Inputform\n\t\t\t\t\t\taddTolist={this.addTolist}\n\t\t\t\t\t\thandlePressKey={this.handleChange}\n\t\t\t\t\t\tstate={this.state}\n\t\t\t\t\t\ttoSetNewState={this.toSetNewState}\n\t\t\t\t\t\ttoHideInput={this.toHideInput}\n\t\t\t\t\t/>\n\t\t\t\t}\n\n\t\t\t\t<div id=\"main\"\n\t\t\t\t\t//делаем область страницы неактивной под полем ввода\n\t\t\t\t\tclassName={this.state.isInputShown ? 'list-disable' : undefined}>\n\n\t\t\t\t\t<button id=\"add-button\" onClick={this.toShowInput}>+</button>\n\t\t\t\t\t<div id=\"header\">Мой список дел</div>\n\n\t\t\t\t\t<div className=\"todo-list\" /* здесь отобразим элементы списка дела */>\n\t\t\t\t\t\t{todoList}\n\t\t\t\t\t</div>\n\t\t\t\t</div >\n\t\t\t</>\n\t\t)\n\t};\n};\n\nexport default App;\n","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}